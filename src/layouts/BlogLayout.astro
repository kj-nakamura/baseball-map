---
import BaseLayout from './BaseLayout.astro';

export interface Props {
  title: string;
  description?: string;
  author?: string;
  publishDate?: string;
  category?: string;
  tags?: string[];
  hero?: {
    image?: string;
    alt?: string;
  };
}

const { 
  title, 
  description, 
  author = 'プロ野球球場ガイド', 
  publishDate,
  category,
  tags = [],
  hero 
} = Astro.props;

// 日付のフォーマット
const formatDate = (dateString: string) => {
  const date = new Date(dateString);
  return date.toLocaleDateString('ja-JP', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
};

// 現在のURLから関連する球団を推定
const currentPath = Astro.url.pathname;
const getRelatedTeamInfo = () => {
  if (currentPath.includes('hokkaido') || currentPath.includes('fighters')) {
    return { team: 'fighters', name: 'ファイターズ', stadium: 'エスコンフィールド北海道', icon: '🏔️' };
  } else if (currentPath.includes('osaka') && currentPath.includes('buffaloes')) {
    return { team: 'buffaloes', name: 'バファローズ', stadium: '京セラドーム大阪', icon: '🐃' };
  } else if (currentPath.includes('osaka') && currentPath.includes('tigers')) {
    return { team: 'tigers', name: 'タイガース', stadium: '阪神甲子園球場', icon: '🐅' };
  } else if (currentPath.includes('saitama') || currentPath.includes('lions')) {
    return { team: 'lions', name: 'ライオンズ', stadium: 'ベルーナドーム', icon: '🦁' };
  } else if (currentPath.includes('chiba') || currentPath.includes('marines')) {
    return { team: 'marines', name: 'マリーンズ', stadium: 'ZOZOマリンスタジアム', icon: '⚓' };
  } else if (currentPath.includes('miyagi') || currentPath.includes('eagles')) {
    return { team: 'eagles', name: 'イーグルス', stadium: '楽天モバイルパーク宮城', icon: '🦅' };
  } else if (currentPath.includes('fukuoka') || currentPath.includes('hawks')) {
    return { team: 'hawks', name: 'ホークス', stadium: 'PayPayドーム', icon: '🦅' };
  } else if (currentPath.includes('tokyo-giants') || currentPath.includes('giants')) {
    return { team: 'giants', name: 'ジャイアンツ', stadium: '東京ドーム', icon: '🧡' };
  } else if (currentPath.includes('tokyo-swallows') || currentPath.includes('swallows')) {
    return { team: 'swallows', name: 'スワローズ', stadium: '明治神宮野球場', icon: '🐦' };
  } else if (currentPath.includes('yokohama') || currentPath.includes('baystars')) {
    return { team: 'baystars', name: 'ベイスターズ', stadium: '横浜スタジアム', icon: '⭐' };
  } else if (currentPath.includes('nagoya') || currentPath.includes('dragons')) {
    return { team: 'dragons', name: 'ドラゴンズ', stadium: 'バンテリンドーム ナゴヤ', icon: '🐉' };
  } else if (currentPath.includes('hiroshima') || currentPath.includes('carp')) {
    return { team: 'carp', name: 'カープ', stadium: 'MAZDA Zoom-Zoom スタジアム広島', icon: '🎣' };
  }
  // デフォルト
  return { team: 'fighters', name: 'ファイターズ', stadium: 'エスコンフィールド北海道', icon: '🏔️' };
};

const relatedTeam = getRelatedTeamInfo();

// 関連する旅行記事を取得
const getRelatedTravelInfo = () => {
  if (currentPath.includes('hokkaido')) {
    return { path: '/travel/hokkaido-3days', title: '北海道3日間モデルコース', icon: '🏔️' };
  } else if (currentPath.includes('osaka') && currentPath.includes('buffaloes')) {
    return { path: '/travel/osaka-2days', title: '大阪2日間モデルコース', icon: '🏰' };
  } else if (currentPath.includes('osaka') && currentPath.includes('tigers')) {
    return { path: '/travel/osaka-tigers-2days', title: '大阪・神戸2日間コース', icon: '🐅' };
  } else if (currentPath.includes('saitama')) {
    return { path: '/travel/saitama-2days', title: '埼玉2日間モデルコース', icon: '🌸' };
  } else if (currentPath.includes('chiba')) {
    return { path: '/travel/chiba-2days', title: '千葉2日間モデルコース', icon: '🌊' };
  } else if (currentPath.includes('miyagi')) {
    return { path: '/travel/miyagi-2days', title: '宮城2日間モデルコース', icon: '🌸' };
  } else if (currentPath.includes('fukuoka')) {
    return { path: '/travel/fukuoka-2days', title: '福岡2日間モデルコース', icon: '🍜' };
  } else if (currentPath.includes('tokyo-giants')) {
    return { path: '/travel/tokyo-giants-2days', title: '東京王道観光コース', icon: '🏯' };
  } else if (currentPath.includes('tokyo-swallows')) {
    return { path: '/travel/tokyo-swallows-2days', title: '東京モダン観光コース', icon: '🎨' };
  } else if (currentPath.includes('yokohama')) {
    return { path: '/travel/yokohama-2days', title: '横浜みなとみらいコース', icon: '🌉' };
  } else if (currentPath.includes('nagoya')) {
    return { path: '/travel/nagoya-2days', title: '名古屋めしコース', icon: '🏰' };
  } else if (currentPath.includes('hiroshima')) {
    return { path: '/travel/hiroshima-2days', title: '平和・宮島満喫コース', icon: '⛩️' };
  }
  return null;
};

const relatedTravel = getRelatedTravelInfo();

// ページタイプを判定
const isGuidePage = currentPath.includes('/guides/');
const isTravelPage = currentPath.includes('/travel/');
---

<BaseLayout title={title} description={description}>
  <!-- ヒーロー画像セクション（オプション） -->
  {hero && hero.image && (
    <section class="hero-section">
      <div class="hero-container">
        <img src={hero.image} alt={hero.alt || title} class="hero-image" />
        <div class="hero-overlay">
          <div class="hero-content">
            <h1 class="hero-title">{title}</h1>
            {description && <p class="hero-description">{description}</p>}
          </div>
        </div>
      </div>
    </section>
  )}

  <!-- ブログ記事コンテナ -->
  <div class="blog-container">
    <!-- ヘッダー（ヒーロー画像がない場合） -->
    {!hero?.image && (
      <header class="blog-header">
        <div class="breadcrumb">
          <a href="/" class="breadcrumb-link">ホーム</a>
          <span class="breadcrumb-separator">›</span>
          {category && (
            <>
              <span class="breadcrumb-category">{category}</span>
              <span class="breadcrumb-separator">›</span>
            </>
          )}
          <span class="breadcrumb-current">{title}</span>
        </div>
        
        <h1 class="blog-title">{title}</h1>
        
        {description && (
          <p class="blog-description">{description}</p>
        )}
        
        <div class="blog-meta">
          <div class="meta-item">
            <span class="meta-icon">👤</span>
            <span class="meta-text">{author}</span>
          </div>
          
          {publishDate && (
            <div class="meta-item">
              <span class="meta-icon">📅</span>
              <span class="meta-text">{formatDate(publishDate)}</span>
            </div>
          )}
          
          {category && (
            <div class="meta-item">
              <span class="meta-icon">📂</span>
              <span class="meta-text">{category}</span>
            </div>
          )}
        </div>
        
        {tags.length > 0 && (
          <div class="blog-tags">
            {tags.map(tag => (
              <span class="tag">{tag}</span>
            ))}
          </div>
        )}
      </header>
    )}

    <!-- メインコンテンツ -->
    <main class="blog-content">
      <article class="article">
        <slot />
      </article>
    </main>

    <!-- サイドバー -->
    <aside class="blog-sidebar">
      <!-- 関連記事 -->
      <div class="sidebar-section">
        <h3 class="sidebar-title">関連記事</h3>
        <div class="related-links">
          {isTravelPage ? (
            // 旅行記事の場合：観戦ガイドを優先表示
            <>
              <a href={`/guides/${relatedTeam.team}`} class="related-link">
                <span class="related-icon">{relatedTeam.icon}</span>
                <div class="related-content">
                  <h4>{relatedTeam.name}観戦ガイド</h4>
                  <p>{relatedTeam.stadium}</p>
                </div>
              </a>
              
              <a href="/guides" class="related-link">
                <span class="related-icon">⚾</span>
                <div class="related-content">
                  <h4>球場観戦ガイド一覧</h4>
                  <p>全12球団の観戦情報</p>
                </div>
              </a>
            </>
          ) : (
            // 観戦ガイドまたはその他の場合：旅行記事を優先表示
            <>
              {relatedTravel && (
                <a href={relatedTravel.path} class="related-link">
                  <span class="related-icon">{relatedTravel.icon}</span>
                  <div class="related-content">
                    <h4>{relatedTravel.title}</h4>
                    <p>観戦＋観光旅行プラン</p>
                  </div>
                </a>
              )}
              
              <a href="/guides" class="related-link">
                <span class="related-icon">⚾</span>
                <div class="related-content">
                  <h4>球場観戦ガイド一覧</h4>
                  <p>全12球団の観戦情報</p>
                </div>
                </a>
            </>
          )}
        </div>
      </div>

      <!-- クイックナビ -->
      <div class="sidebar-section">
        <h3 class="sidebar-title">クイックナビ</h3>
        <nav class="quick-nav">
          <a href="/" class="nav-item">
            <span class="nav-icon">🗾</span>
            <span>球場マップ</span>
          </a>
          <a href="/guides" class="nav-item">
            <span class="nav-icon">📖</span>
            <span>観戦ガイド</span>
          </a>
          {isTravelPage ? (
            <a href={`/guides/${relatedTeam.team}`} class="nav-item">
              <span class="nav-icon">{relatedTeam.icon}</span>
              <span>{relatedTeam.name}ガイド</span>
            </a>
          ) : relatedTravel ? (
            <a href={relatedTravel.path} class="nav-item">
              <span class="nav-icon">{relatedTravel.icon}</span>
              <span>旅行プラン</span>
            </a>
          ) : (
            <a href="/travel" class="nav-item">
              <span class="nav-icon">✈️</span>
              <span>旅行プラン</span>
            </a>
          )}
        </nav>
      </div>

      <!-- SNSシェア -->
      <div class="sidebar-section">
        <h3 class="sidebar-title">シェア</h3>
        <div class="share-buttons">
          <button class="share-btn twitter" onclick="shareToTwitter()">
            <span class="share-icon">🐦</span>
            <span>Twitter</span>
          </button>
          <button class="share-btn facebook" onclick="shareToFacebook()">
            <span class="share-icon">👥</span>
            <span>Facebook</span>
          </button>
          <button class="share-btn line" onclick="shareToLine()">
            <span class="share-icon">💬</span>
            <span>LINE</span>
          </button>
        </div>
      </div>
    </aside>
  </div>

  <!-- フッターナビゲーション -->
  <section class="footer-nav">
    <div class="footer-nav-container">
      <a href="/" class="footer-nav-link">
        <span class="footer-nav-icon">🏠</span>
        <span class="footer-nav-text">ホームに戻る</span>
      </a>
      <a href="/guides" class="footer-nav-link">
        <span class="footer-nav-icon">⚾</span>
        <span class="footer-nav-text">観戦ガイド一覧</span>
      </a>
    </div>
  </section>
</BaseLayout>

<style>
  @import '/src/styles/blog.css';
</style>

<script>
  // SNSシェア機能
  function shareToTwitter() {
    const url = encodeURIComponent(window.location.href);
    const text = encodeURIComponent(document.title);
    window.open(`https://twitter.com/intent/tweet?url=${url}&text=${text}`, '_blank');
  }

  function shareToFacebook() {
    const url = encodeURIComponent(window.location.href);
    window.open(`https://www.facebook.com/sharer/sharer.php?u=${url}`, '_blank');
  }

  function shareToLine() {
    const url = encodeURIComponent(window.location.href);
    const text = encodeURIComponent(document.title);
    window.open(`https://social-plugins.line.me/lineit/share?url=${url}&text=${text}`, '_blank');
  }
</script>